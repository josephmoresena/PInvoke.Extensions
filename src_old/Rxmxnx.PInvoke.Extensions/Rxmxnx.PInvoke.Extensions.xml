<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rxmxnx.PInvoke.Extensions</name>
    </assembly>
    <members>
        <member name="T:Rxmxnx.PInvoke.Extensions.BinaryExtensions">
            <summary>
            Provides a set of extensions for basic operations with <see cref="T:System.Byte"/> instances.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.BinaryExtensions.AsValue``1(System.Byte[])">
            <summary>
            Retrieves a <typeparamref name="T"/> value from the given <see cref="T:System.Byte"/> array.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <param name="array"><see cref="T:System.Byte"/> array.</param>
            <returns><typeparamref name="T"/> readed value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.BinaryExtensions.AsValue``1(System.Span{System.Byte})">
            <summary>
            Retrieves a <typeparamref name="T"/> value from the given <see cref="T:System.Byte"/> array.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <param name="span"><see cref="T:System.Byte"/> span.</param>
            <returns><typeparamref name="T"/> readed value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.BinaryExtensions.AsValue``1(System.ReadOnlySpan{System.Byte})">
            <summary>
            Retrieves a <typeparamref name="T"/> value from the given <see cref="T:System.Byte"/> array.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <param name="span"><see cref="T:System.Byte"/> read-only span.</param>
            <returns><typeparamref name="T"/> readed value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.BinaryExtensions.ConcatUtf8(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Concatenates the members of a collection of UTF-8 texts.
            </summary>
            <param name="values">A collection that contains the UTF-8 texts to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.BinaryExtensions.AsHexString(System.Byte[])">
            <summary>
            Gets <see cref="T:System.String"/> representation of <see cref="T:System.Byte"/> array hexadecimal value.
            </summary>
            <param name="bytes"><see cref="T:System.Byte"/> array.</param>
            <returns><see cref="T:System.String"/> representation of hexadecimal value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.BinaryExtensions.AsHexString(System.Byte)">
            <summary>
            Gets <see cref="T:System.String"/> representation of <see cref="T:System.Byte"/> hexadecimal value.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> value.</param>
            <returns><see cref="T:System.String"/> representation of hexadecimal value.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.CString">
            <summary>
            Represents text as a sequence of UTF-8 code units.
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.CString.EqualsDelegate">
            <summary>
            Delegate. Indicates whether <paramref name="current"/> <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> is equal to 
            <paramref name="other"/> <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> 
            </summary>
            <param name="current">A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare with <paramref name="other"/>.</param>
            <param name="other">A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare with this <paramref name="current"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="current"/> <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> is equal to 
            <paramref name="other"/> parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CString.empty">
            <summary>
            Represents the empty UTF-8 byte array. This field is read-only.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CString.equals">
            <summary>
            <see cref="T:Rxmxnx.PInvoke.Extensions.CString.EqualsDelegate"/> delegate for native comparision.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CString.Empty">
            <summary>
            Represents the empty UTF-8 string. This field is read-only.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CString._isLocal">
            <summary>
            Indicates whether the UTF-8 data is local.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CString._isFunction">
            <summary>
            Indicates whether the UTF-8 data is a function.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CString._data">
            <summary>
            Internal object data.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CString._isNullTerminated">
            <summary>
            Indicates whether the UTF-8 text is null-terminated.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CString._length">
            <summary>
            Number of bytes in the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> object.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.CString.Position(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Byte"/> object at a specified position in the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>
            object.
            </summary>
            <param name="index">A position in the current UTF-8 text.</param>
            <returns>The object at position <paramref name="index"/>.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is greater than or equal to the length of this object or less than zero.
            </exception>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.CString.Position(System.Range)">
            <summary>
            Gets a <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instance at specified range from current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instace.
            </summary>
            <param name="range"></param>
            <returns><see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> range.</returns>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.CString.Length">
            <summary>
            Gets the number of bytes in the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> object.
            </summary>
            <returns>
            The number of characters in the current string.
            </returns>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.CString.IsNullTerminated">
            <summary>
            Indicates whether the ending of text in the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> includes 
            a null-termination character.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.CString.IsReference">
            <summary>
            Indicates whether the UTF-8 text is referenced by the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> and 
            not contained by.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.CString.IsSegmented">
            <summary>
            Indicates whether the current instance is segmented.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.CString.IsFunction">
            <summary>
            Indicates whether the current instance is a function.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.#ctor(System.Byte[])">
            <summary>
            Private constructor.
            </summary>
            <param name="bytes">Binary internal information.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.#ctor(Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc{System.Byte},System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="func"><see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1"/> delegate.</param>
            <param name="isLiteral">Indicates whether returned span is from UTF-8 literal.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.#ctor(Rxmxnx.PInvoke.Extensions.CString,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="value">A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> value.</param>
            <param name="offset">Offset for range.</param>
            <param name="length">Length of range.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.#ctor(System.Byte,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> class to the value indicated by a specified 
            UTF-8 character repeated a specified number of times.
            </summary>
            <param name="c"></param>
            <param name="count"></param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.#ctor(Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc{System.Byte})">
            <summary>
            Constructor.
            </summary>
            <param name="func"><see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> class to the value indicated by a specified 
            pointer to an array of UTF-8 characters and a length.
            </summary>
            <param name="ptr">A pointer to a array of UTF-8 characters.</param>
            <param name="length">The number of <see cref="T:System.Byte"/> within value to use.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.ToArray">
            <summary>
            Copies the UTF-8 text into a new array.
            </summary>
            <returns>An array containing the data in the current UTF-8 text.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.AsSpan">
            <summary>
            Retreives the internal or external information as <see cref="T:System.ReadOnlySpan`1"/> object.
            </summary>
            <returns><see cref="T:System.ReadOnlySpan`1"/> instance.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.AsHexString">
            <summary>
            Gets <see cref="T:System.String"/> representation of the current UTF-8 text as hexadecimal value.
            </summary>
            <returns><see cref="T:System.String"/> representation of hexadecimal value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.WithSafeFixed(Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{System.Byte})">
            <summary>
            Prevents the garbage collector from relocating the current instance and fixes its memory 
            address until <paramref name="action"/> finish.
            </summary>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedAction`1"/> delegate.></param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.WithSafeFixed``1(``0,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{System.Byte,``0})">
            <summary>
            Prevents the garbage collector from relocating the current instance and fixes its memory 
            address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.WithSafeFixed``1(Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{System.Byte,``0})">
            <summary>
            Prevents the garbage collector from relocating the current instance and fixes its memory 
            address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.WithSafeFixed``2(``0,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{System.Byte,``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the current instance and fixes its memory 
            address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetEnumerator">
            <summary>
            Retrieves an object that can iterate through the individual <see cref="T:System.Byte"/> in this 
            <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.
            </summary>
            <returns>An enumerator object.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.Clone">
            <summary>
            Returns a reference to this instance of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.Equals(Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Indicates whether the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> is equal to another <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> 
            instance.
            </summary>
            <param name="other">A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> is equal to the <paramref name="other"/> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true"/> if the specified object is equal to the current object; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance.
            </summary>
            <returns>A string that represents the current UTF-8 text.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.Write(System.IO.Stream,System.Boolean)">
            <summary>
            Writes the sequence of bytes to the given <see cref="T:System.IO.Stream"/> and advances
            the current position within this stream by the number of bytes written.
            </summary>
            <param name="strm">
            The <see cref="T:System.IO.Stream"/> to which the contents of the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> 
            will be copied.
            </param>
            <param name="writeNullTermination">
            Indicates whether the UTF-8 text must be written with a null-termination character 
            into the <see cref="T:System.IO.Stream"/>.
            </param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.WriteAsync(System.IO.Stream,System.Boolean)">
            <summary>
            Asynchronously writes the sequence of bytes to the given <see cref="T:System.IO.Stream"/> and advances
            the current position within this stream by the number of bytes written.
            </summary>
            <param name="strm">
            The <see cref="T:System.IO.Stream"/> to which the contents of the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> 
            will be copied.
            </param>
            <param name="writeNullTermination">
            Indicates whether the UTF-8 text must be written with a null-termination character 
            into the <see cref="T:System.IO.Stream"/>.
            </param>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.IsNullOrEmpty(Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Indicates whether the specified <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> is <see langword="null"/> or an 
            empty UTF-8 text.
            </summary>
            <param name="value">The <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to test.</param>
            <returns>
            <see langword="true"/> if the value parameter is <see langword="null"/> or an empty UTF-8 text; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.op_Implicit(System.Byte[])~Rxmxnx.PInvoke.Extensions.CString">
            <summary>
            Defines an implicit conversion of a given <see cref="T:System.Byte"/> array to <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.
            </summary>
            <param name="bytes">A <see cref="T:System.Byte"/> array to implicitly convert.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.op_Implicit(System.String)~Rxmxnx.PInvoke.Extensions.CString">
            <summary>
            Defines an implicit conversion of a given <see cref="T:System.String"/> to <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.
            </summary>
            <param name="str">A <see cref="T:System.String"/> to implicitly convert.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.op_Implicit(Rxmxnx.PInvoke.Extensions.CString)~System.ReadOnlySpan{System.Byte}">
            <summary>
            Defines an implicit conversion of a given <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to a read-only span of bytes.
            </summary>
            <param name="value">A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to implicitly convert.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.op_Equality(Rxmxnx.PInvoke.Extensions.CString,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Determines whether two specified <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> have the same value.
            </summary>
            <param name="a">The first <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare, or <see langword="null"/>.</param>
            <param name="b">The second <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare, or <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="a"/> is the same as the value 
            of <paramref name="b"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.op_Inequality(Rxmxnx.PInvoke.Extensions.CString,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Determines whether two specified <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> have different values.
            </summary>
            <param name="a">The first <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare, or <see langword="null"/>.</param>
            <param name="b">The second <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare, or <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the value of <paramref name="a"/> is different from the value  
            of <paramref name="b"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetBytes(Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Retrieves the internal binary data from a given <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.
            </summary>
            <param name="value">A non-reference <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instance.</param>
            <returns>A <see cref="T:System.Byte"/> array with UTF-8 text.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="value"/> does not contains the UTF-8 text.</exception>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.Create(Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc{System.Byte})">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instance from <paramref name="func"/>.
            </summary>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1"/> delegate that returns a Utf8 string non-literal.</param>
            <returns>A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instance from <paramref name="func"/>.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetDataLength(System.Int32,System.Int32)">
            <summary>
            Calculates the data length of a segment of current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> whose 
            offset is <paramref name="offset"/> and whose length is <paramref name="length"/>.
            </summary>
            <param name="offset">Offset for segment.</param>
            <param name="length">Initial length for segment.</param>
            <returns>Final length for segment.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetHasCodeLengthNullMatch">
            <summary>
            Hash calculation for instances whose length and termination allow it to be treated 
            as a sequence of UTF-16 units.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetWriteTask(System.IO.Stream)">
            <summary>
            Retrieves the Task for writing the <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> content into the 
            given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="strm">
            The <see cref="T:System.IO.Stream"/> to which the contents of the current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> 
            will be copied.
            </param>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetEqualityParameters``1(System.Int32@,System.Int32@)">
            <summary>
            Retrieves the equality parameters for current <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instance.
            </summary>
            <typeparam name="TInteger">Type used for integer comparision.</typeparam>
            <param name="offset">Output. Calculated offset.</param>
            <param name="count">Output. Calculated count.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetEquals">
            <summary>
            Retrives a <see cref="T:Rxmxnx.PInvoke.Extensions.CString.EqualsDelegate"/> delegate for native comparision.
            </summary>
            <returns><see cref="T:Rxmxnx.PInvoke.Extensions.CString.EqualsDelegate"/> delegate.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.GetUtf8Bytes(System.String)">
            <summary>
            Encodes the UTF-16 text using the UTF-8 charset and retrieves the <see cref="T:System.Byte"/> array with 
            UTF-8 text.
            </summary>
            <param name="str"><see cref="T:System.String"/> representation of UTF-16 text.</param>
            <returns><see cref="T:System.Byte"/> array with UTF-8 text.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.Equals``1(Rxmxnx.PInvoke.Extensions.CString,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Indicates whether <paramref name="current"/> <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> is equal to 
            <paramref name="other"/> <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> 
            instance.
            </summary>
            <typeparam name="TInteger"><see cref="T:System.ValueType"/> for reduce comparation.</typeparam>
            <param name="current">A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare with <paramref name="other"/>.</param>
            <param name="other">A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to compare with this <paramref name="current"/>.</param>
            <returns>
            <see langword="true"/> if <paramref name="current"/> <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> is equal to 
            <paramref name="other"/> parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CString.IsNullTerminatedSpan(System.ReadOnlySpan{System.Byte})">
            <summary>
            Indicates whether <paramref name="data"/> contains a null-terminated UTF-8 text.
            </summary>
            <param name="data">A read-only byte span containing UTF-8 text.</param>
            <returns>
            <see langword="true"/> if <paramref name="data"/> contains a null-terminated UTF-8 text; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.CStringSequence">
            <summary>
            Represents a sequence of null-terminated UTF-8 texts.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CStringSequence.sizeOfChar">
            <summary>
            Size of <see cref="T:System.Char"/> value.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CStringSequence._value">
            <summary>
            Internal buffer.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.CStringSequence._lengths">
            <summary>
            Collection of text length for buffer interpretation.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.CStringSequence.Count">
            <summary>
            Gets the number of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> contained in <see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/>.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.#ctor(Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Constructor.
            </summary>
            <param name="values">Text collection.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.#ctor(Rxmxnx.PInvoke.Extensions.CStringSequence)">
            <summary>
            Constructor.
            </summary>
            <param name="sequence"><see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/> instance.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.#ctor(System.String,System.Int32[])">
            <summary>
            Constructor.
            </summary>
            <param name="value">Internal buffer.</param>
            <param name="lengths">Collection of text length for buffer interpretation.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.AsSpan(Rxmxnx.PInvoke.Extensions.CString[]@)">
            <summary>
            Retrieves the buffer as an <see cref="T:System.ReadOnlySpan`1"/> instance and creates a
            <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> array which represents text sequence.
            </summary>
            <remarks>
            <paramref name="output"/> will remain valid only as long as returned 
            <see cref="T:System.ReadOnlySpan`1"/> is on live.
            </remarks>
            <param name="output"><see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> array.</param>
            <returns>Buffer <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.Transform``1(``0,Rxmxnx.PInvoke.Extensions.CStringSequenceAction{``0})">
            <summary>
            Use current instance as <see cref="T:System.ReadOnlySpan`1"/> instance and <paramref name="state"/>
            as parameters for <paramref name="action"/> delegate.
            </summary>
            <typeparam name="TState">The type of the element to pass to <paramref name="action"/>.</typeparam>
            <param name="state">The element to pass to <paramref name="action"/>.</param>
            <param name="action">A callback to invoke.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.Transform``2(``0,Rxmxnx.PInvoke.Extensions.CStringSequenceFunc{``0,``1})">
            <summary>
            Use current instance as <see cref="T:System.ReadOnlySpan`1"/> instance and <paramref name="state"/>
            as parameters for <paramref name="func"/> delegate.
            </summary>
            <typeparam name="TState">The type of the element to pass to <paramref name="func"/>.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="state">The element to pass to <paramref name="func"/>.</param>
            <param name="func">A callback to invoke.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.Clone">
            <summary>
            Returns a reference to this instance of <see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/>.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.ToCString">
            <summary>
            Returns a <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> that represents the current object.
            </summary>
            <returns>A <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> that represents the current object.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.Equals(Rxmxnx.PInvoke.Extensions.CStringSequence)">
            <summary>
            Indicates whether the current <see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/> is equal to another <see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/> 
            instance.
            </summary>
            <param name="other">A <see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/> to compare with this object.</param>
            <returns>
            <see langword="true"/> if the current <see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/> is equal to the <paramref name="other"/> 
            parameter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>
            <see langword="true"/> if the specified object is equal to the current object; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current object.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.Create``1(``0,Rxmxnx.PInvoke.Extensions.CStringSequenceCreationAction{``0},System.Int32[])">
            <summary>
            Creates a new UTF-8 text sequence with a specific <paramref name="lengths"/> and initializes each
            UTF-8 texts into it after creation by using the specified callback.
            </summary>
            <typeparam name="TState">The type of the element to pass to <paramref name="action"/>.</typeparam>
            <param name="lengths">The lengths of the UTF-8 text sequence to create.</param>
            <param name="state">The element to pass to <paramref name="action"/>.</param>
            <param name="action">A callback to initialize each <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.</param>
            <returns>The create UTF-8 text sequence.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.InternalAsSpan(Rxmxnx.PInvoke.Extensions.CString[]@)">
            <summary>
            Retrieves the buffer as an <see cref="T:System.ReadOnlySpan`1"/> instance and creates a
            <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> array which represents text sequence.
            </summary>
            <param name="output"><see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> array.</param>
            <returns>Buffer <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.GetValues(System.IntPtr)">
            <summary>
            Retrieves the sequence of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> based on the buffer and lengths.
            </summary>
            <param name="ptr">Buffer pointer.</param>
            <returns>Collection of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.CreateBuffer(System.Int32[],Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Creates the sequence buffer.
            </summary>
            <param name="lengths">Text length collection.</param>
            <param name="values">Text collection.</param>
            <returns>
            <see cref="T:System.String"/> instance that contains the binary information of the UTF-8 text sequence.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.CopyText(System.Span{System.Char},Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Copy the content of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> items in <paramref name="values"/> to
            <paramref name="charSpan"/> span.
            </summary>
            <param name="charSpan">A writable <see cref="T:System.Char"/> span.</param>
            <param name="values">A enumeration of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> items.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.CopySequence(System.Span{System.Char},Rxmxnx.PInvoke.Extensions.CStringSequence)">
            <summary>
            Copy the content of <paramref name="sequence"/> to <paramref name="charSpan"/>.
            </summary>
            <param name="charSpan">A writable <see cref="T:System.Char"/> span.</param>
            <param name="sequence">A <see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/> instance.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.BinaryCopyTo(System.ReadOnlySpan{Rxmxnx.PInvoke.Extensions.CString},System.Byte[])">
            <summary>
            Preforms a binary copy of all non-empty <paramref name="span"/> to 
            <paramref name="destination"/> span.
            </summary>
            <param name="span">A read-only <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> span instance.</param>
            <param name="destination">The destination binary buffer.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.CStringSequence.CreateCStringSequence``1(System.IntPtr,System.Int32[],``0,Rxmxnx.PInvoke.Extensions.CStringSequenceCreationAction{``0})">
            <summary>
            Performs the creation of the UTF-8 text sequence with a specific <paramref name="lengths"/> and 
            whose buffer is referenced by <paramref name="bufferPtr"/>. 
            Each UTF-8 text is initialized using the specified callback.
            </summary>
            <typeparam name="TState">The type of the element to pass to <paramref name="action"/>.</typeparam>
            <param name="bufferPtr">Pointer to internal <see cref="T:Rxmxnx.PInvoke.Extensions.CStringSequence"/> buffer.</param>
            <param name="lengths">The lengths of the UTF-8 text sequence to create.</param>
            <param name="state">The element to pass to <paramref name="action"/>.</param>
            <param name="action">A callback to initialize each <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.DelegateExtensions">
            <summary>
            Provides a set of extensions for basic operations with <see cref="T:System.Delegate"/> instances.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.DelegateExtensions.AsIntPtr``1(``0)">
            <summary>
            Creates a <see cref="T:System.IntPtr"/> pointer from a memory reference to a <typeparamref name="T"/> delegate.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Delegate"/> referenced into the pointer.</typeparam>
            <param name="delegateInstance"><typeparamref name="T"/> delegate.</param>
            <returns><see cref="T:System.IntPtr"/> pointer.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.DelegateExtensions.AsUIntPtr``1(``0)">
            <summary>
            Creates a <see cref="T:System.UIntPtr"/> pointer from a memory reference to a <typeparamref name="T"/> delegate.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Delegate"/> referenced into the pointer.</typeparam>
            <param name="delegateInstance"><typeparamref name="T"/> delegate.</param>
            <returns><see cref="T:System.UIntPtr"/> pointer.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1">
            <summary>
            Encapsulates a method that has no parameters and returns a <see cref="T:System.ReadOnlySpan`1"/> instance.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> instance.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.FixedAction`1">
            <summary>
            Encapsulates a method that receives a <see cref="T:Rxmxnx.PInvoke.Extensions.IFixedContext`1"/> instance.
            </summary>
            <typeparam name="T">Type of the fixed context.</typeparam>
            <param name="ctx">Fixed context instance.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.FixedAction`2">
            <summary>
            Encapsulates a method that receives a <see cref="T:Rxmxnx.PInvoke.Extensions.IFixedContext`1"/> instance and a 
            state object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">Type of the fixed context.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="ctx">Fixed context instance.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`1">
            <summary>
            Encapsulates a method that receives a <see cref="T:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1"/> instance.
            </summary>
            <typeparam name="T">Type of the fixed context.</typeparam>
            <param name="ctx">Read-only fixed context instance.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2">
            <summary>
            Encapsulates a method that receives a <see cref="T:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1"/> instance and a 
            state object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">Type of the fixed context.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="ctx">Read-only fixed context instance.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.FixedFunc`2">
            <summary>
            Encapsulates a method that receives a <see cref="T:Rxmxnx.PInvoke.Extensions.IFixedContext`1"/> instance.
            </summary>
            <typeparam name="T">Type of the fixed context.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="ctx">Fixed context instance.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.FixedFunc`3">
            <summary>
            Encapsulates a method that receives a <see cref="T:Rxmxnx.PInvoke.Extensions.IFixedContext`1"/> instance.
            </summary>
            <typeparam name="T">Type of the fixed context.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="ctx">Fixed context instance.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`2">
            <summary>
            Encapsulates a method that receives a <see cref="T:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1"/> instance.
            </summary>
            <typeparam name="T">Type of the fixed context.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="ctx">Read-only fixed instance.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`3">
            <summary>
            Encapsulates a method that receives a <see cref="T:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1"/> instance.
            </summary>
            <typeparam name="T">Type of the fixed context.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="ctx">Read-only fixed instance.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.SpanFunc`3">
            <summary>
            Encapsulates a method that receives a span of objects of type <typeparamref name="T"/> and a 
            state object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`3">
            <summary>
            Encapsulates a method that receives a read-only span of objects of type <typeparamref name="T"/> and a 
            state object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.CStringSequenceAction`1">
            <summary>
            Encapsulates a method that receives a read-only span of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instances and a state 
            object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="values">A <see cref="T:System.ReadOnlySpan`1"/> of objects of type T.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.CStringSequenceCreationAction`1">
            <summary>
            Encapsulates a method that receives a read-only span of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instances and a state 
            object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A binary span.</param>
            <param name="index">Index of current sequence intem.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.CStringSequenceFunc`2">
            <summary>
            Encapsulates a method that receives a read-only span of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> instances and a state 
            object of type <typeparamref name="TArg"/> and returns a value of the type specified by the 
            <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="values">A <see cref="T:System.ReadOnlySpan`1"/> of objects of type T.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.SpanTransformAction`2">
            <summary>
            Encapsulates a method that receives a span of <typeparamref name="T"/> values and a state 
            object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="residue">The residual span of bytes.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.SpanTransformFunc`3">
            <summary>
            Encapsulates a method that receives a span of <typeparamref name="T"/> values and a state 
            object of type <typeparamref name="TArg"/> and returns a value of the type specified by the 
            <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="residue">The residual span of bytes.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformAction`2">
            <summary>
            Encapsulates a method that receives a read-only span of <typeparamref name="T"/> values and a state 
            object of type <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="residue">The residual span of bytes.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformFunc`3">
            <summary>
            Encapsulates a method that receives a read-only span of <typeparamref name="T"/> values and a state 
            object of type <typeparamref name="TArg"/> and returns a value of the type specified by the 
            <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="residue">The residual span of bytes.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.BinarySpanTransformAction`1">
            <summary>
            Encapsulates a method that receives a binary span and a state object of type 
            <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A binary span.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.BinaryReadOnlySpanTransformAction`1">
            <summary>
            Encapsulates a method that receives a binary read-only span and a state object of type 
            <typeparamref name="TArg"/>.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A binary read-only span.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.BinarySpanTransformFunc`2">
            <summary>
            ncapsulates a method that receives a binary span and a state object of type 
            <typeparamref name="TArg"/> and returns a value of the type specified by the 
            <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="span">A binary span.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.BinaryReadOnlySpanTransformFunc`2">
            <summary>
            Encapsulates a method that receives a binary read-only span and a state object of type 
            <typeparamref name="TArg"/> and returns a value of the type specified by the 
            <typeparamref name="TResult"/> parameter.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.</typeparam>
            <param name="span">A binary read-only span.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <returns>The return value of the method that this delegate encapsulates.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.IFixedContext`1">
            <summary>
            This interface represents a context from memory block fixing.
            </summary>
            <typeparam name="T">Type of items on the fixed memory block.</typeparam>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IFixedContext`1.Values">
            <summary>
            A <typeparamref name="T"/> span over the fixed memory block.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IFixedContext`1.BinaryValues">
            <summary>
            A binary span over the fixed memory block.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.IFixedContext`1.Transformation``1">
            <summary>
            Performs a reinterpretation of <typeparamref name="T"/> fixed memory block as 
            <typeparamref name="TDestination"/> memory block.
            </summary>
            <typeparam name="TDestination">Type of items on the reinterpreded memory block.</typeparam>
            <returns>A <see cref="T:Rxmxnx.PInvoke.Extensions.ITransformationContext`2"/> instance.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.IFixedContext`1.AsReadOnly">
            <summary>
            Retrieves the current context as read-only fixed memory block context.
            </summary>
            <returns>A <see cref="T:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1"/> instance.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.IMutableReference`1">
            <summary>
            This interface exposes a wrapper for <typeparamref name="T"/> object that can be 
            referenced and whose value can be modified.
            </summary>
            <typeparam name="T">Type of both wrapped and referenced value.</typeparam>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.IMutableWrapper`1">
            <summary>
            This interface exposes a wrapper for <typeparamref name="T"/> object whose value 
            can be modified.
            </summary>
            <typeparam name="T">Type of wrapped value.</typeparam>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.IMutableWrapper`1.SetInstance(`0)">
            <summary>
            Sets the instance object.
            </summary>
            <param name="newValue">New <typeparamref name="T"/> object to set as instance object.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.InputValue">
            <summary>
            Supports a value type that can be referenced. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.CreateInput``1(``0@)">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.IReferenceableWrapper`1"/> object from a 
            <typeparamref name="TValue"/> value.
            </summary>
            <typeparam name="TValue"><see cref="T:System.ValueType"/> of object.</typeparam>
            <param name="instance">Instance value.</param>
            <returns>
            <see cref="T:Rxmxnx.PInvoke.Extensions.IReferenceableWrapper`1"/> object which instance object is equal to 
            <paramref name="instance"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.CreateInput``1(System.Nullable{``0}@)">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.IReferenceableWrapper`1"/> object from a 
            <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TValue"><see cref="T:System.ValueType"/> of nullable object.</typeparam>
            <param name="instance">Instance nullable value.</param>
            <returns>
            <see cref="T:Rxmxnx.PInvoke.Extensions.IReferenceableWrapper`1"/> object which instance object is equal to 
            <paramref name="instance"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.CreateReference``1(``0@)">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.IMutableReference`1"/> object from a <typeparamref name="TValue"/> value.
            </summary>
            <typeparam name="TValue"><see cref="T:System.ValueType"/> of object.</typeparam>
            <param name="instance">Instance value.</param>
            <returns>
            <see cref="T:Rxmxnx.PInvoke.Extensions.IMutableReference`1"/> object which instance object is equal to 
            <paramref name="instance"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.CreateReference``1(System.Nullable{``0}@)">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.IMutableReference`1"/> object from a 
            <see cref="T:System.Nullable`1"/> value.
            </summary>
            <typeparam name="TValue"><see cref="T:System.ValueType"/> of nullable object.</typeparam>
            <param name="instance">Instance nullable value.</param>
            <returns>
            <see cref="T:Rxmxnx.PInvoke.Extensions.IMutableReference`1"/> object which instance object is equal to 
            <paramref name="instance"/>.
            </returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.InputValue.ValueInput`1">
            <summary>
            Internal implementation of <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.InputValue`1"/> for <see cref="T:System.ValueType"/> objects.
            </summary>
            <typeparam name="TValue"><see cref="T:System.ValueType"/> of the instance object.</typeparam>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.ValueInput`1.SetInstance(`0@)">
            <summary>
            Internal method to set instance object.
            </summary>
            <param name="newValue">New <typeparamref name="TValue"/> object to set as instance object.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.ValueInput`1.#ctor(`0@)">
            <summary>
            Constructor.
            </summary>
            <param name="instance">Initial value.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.InputValue.NullableInput`1">
            <summary>
            Internal implementation of <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.InputValue`1"/> for nullable <see cref="T:System.ValueType"/> objects.
            </summary>
            <typeparam name="TValue"><see cref="T:System.ValueType"/> of the instance object.</typeparam>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.NullableInput`1.SetInstance(System.Nullable{`0}@)">
            <summary>
            Internal method to set instance object.
            </summary>
            <param name="newValue">New <typeparamref name="TValue"/> object to set as instance object.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.NullableInput`1.#ctor(System.Nullable{`0}@)">
            <summary>
            Constructor.
            </summary>
            <param name="instance">Initial value.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.InputValue.Reference`1">
            <summary>
            Internal implementation of mutable <see cref="T:Rxmxnx.PInvoke.Extensions.InputValue.ValueInput`1"/> object.
            </summary>
            <typeparam name="TValue"><see cref="T:System.ValueType"/> of the instance object.</typeparam>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.InputValue.Reference`1._writeLock">
            <summary>
            Internal lock object.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.Reference`1.SetInstance(`0@)">
            <summary>
            Internal method to set instance object.
            </summary>
            <param name="newValue">New <typeparamref name="TValue"/> object to set as instance object.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.Reference`1.#ctor(`0@)">
            <summary>
            Constructor.
            </summary>
            <param name="instance">Initial value.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.InputValue.NullableReference`1">
            <summary>
            Internal implementation of nullable and mutable <see cref="T:Rxmxnx.PInvoke.Extensions.InputValue.ValueInput`1"/> object.
            </summary>
            <typeparam name="TValue"><see cref="T:System.ValueType"/> of the instance object.</typeparam>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.InputValue.NullableReference`1._writeLock">
            <summary>
            Internal lock object.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.NullableReference`1.SetInstance(System.Nullable{`0}@)">
            <summary>
            Internal method to set instance object.
            </summary>
            <param name="newValue">New <typeparamref name="TValue"/> object to set as instance object.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.InputValue.NullableReference`1.#ctor(System.Nullable{`0}@)">
            <summary>
            Constructor.
            </summary>
            <param name="instance">Initial value.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2">
            <summary>
            This class helps to create a <typeparamref name="TDestination"/> array from
            a <typeparamref name="TSource"/> array.
            </summary>
            <typeparam name="TDestination">Destination <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <typeparam name="TSource">Origin <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2._inputBytes">
            <summary>
            Number of bytes from input.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2._valueSize">
            <summary>
            Size of destination value.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2._readables">
            <summary>
            Count of readable destination values from input.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2._offset">
            <summary>
            Number of offset bytes from input.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2._values">
            <summary>
            Conversion array.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="input">The read-only span which servers as input.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2.GetOverflowElementsCount">
            <summary>
            Gets the amount of elements which overflows the input length.
            </summary>
            <returns>The amount of elements which overflows the input length.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2.Initialize(System.ReadOnlySpan{`0})">
            <summary>
            Copies the input information to the destination and performs the conversion.
            </summary>
            <param name="input">The read-only span which servers as input.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2.GetOffsetStart">
            <summary>
            Gets the start index of byte offset from input.
            </summary>
            <returns>The start index of byte offset from input..</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2.op_Implicit(Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion{`0,`1})~`1[]">
            <summary>
            Implicit operator. <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ArrayValueConversion`2"/> -> <typeparamref name="TDestination"/> array.
            </summary>
            <param name="conversion"><typeparamref name="TDestination"/> array.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1">
            <summary>
            Context from memory block fixing.
            </summary>
            <typeparam name="T">Type of items on the fixed memory block.</typeparam>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1._ptr">
            <summary>
            Pointer to fixed memory block.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1._count">
            <summary>
            Number of <typeparamref name="T"/> items in memory block.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1._binaryLength">
            <summary>
            Memory block size in bytes.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1._isReadOnly">
            <summary>
            Indicates whether the memory block is read-only. 
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1._isValid">
            <summary>
            Indicates whether current instance remains valid.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.BinaryLength">
            <summary>
            Memory block size in bytes.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.#ctor(System.Void*,System.Int32,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="ptr"></param>
            <param name="count"></param>
            <param name="isReadOnly"></param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.CreateSpan``1(System.Int32)">
            <summary>
            Creates a <see cref="T:System.Span`1"/> instance over the memory block whose 
            length is <paramref name="length"/>.
            </summary>
            <typeparam name="TValue">The type of the objects in the span.</typeparam>
            <param name="length">Span length.</param>
            <returns>A <see cref="T:System.Span`1"/> instance over the memory block.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.CreateReadOnlySpan``1(System.Int32)">
            <summary>
            Creates a <see cref="T:System.ReadOnlySpan`1"/> instance over the memory block whose 
            length is <paramref name="length"/>.
            </summary>
            <typeparam name="TValue">The type of the objects in the read-only span.</typeparam>
            <param name="length">Span length.</param>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> instance over the memory block.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.ValidateOperation(System.Boolean)">
            <summary>
            Validates any operation over the fixed memory block.
            </summary>
            <param name="isReadOnly">Indicates whether current operation is read-only one.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.Unload">
            <summary>
            Invalidates current context.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.Equals(Rxmxnx.PInvoke.Extensions.Internal.FixedContext{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1.GetTransformation``1(System.Boolean)">
            <summary>
            Creates a <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.TransformationContext`2"/> instance.
            </summary>
            <typeparam name="TDestination">Type of items on the reinterpreded memory block.</typeparam>
            <param name="isReadOnly">Indicates whether current operation is read-only one.</param>
            <returns>A <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.TransformationContext`2"/> instance.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.InputValue`1">
            <summary>
            Creates an object which contains a single reference to an inmutable <typeparamref name="T"/> object.
            </summary>
            <typeparam name="T">Type of the referenced object.</typeparam>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.InputValue`1._instance">
            <summary>
            Internal <typeparamref name="T"/> object.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.InputValue`1.Reference">
            <summary>
            Reference to instance <typeparamref name="T"/> object.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.InputValue`1.Value">
            <summary>
            Wrapped <typeparamref name="T"/> object.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.InputValue`1.#ctor(`0@)">
            <summary>
            Constructor.
            </summary>
            <param name="instance">Initial value.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.InputValue`1.SetInstance(`0@)">
            <summary>
            Internal method to set instance object.
            </summary>
            <param name="newValue">New <typeparamref name="T"/> object to set as instance object.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.TransformationContext`2">
            <summary>
            Reinterpretation of a <typeparamref name="TSource"/> fixed memory block as a 
            <typeparamref name="TDestination"/> memory block.
            </summary>
            <typeparam name="TSource">Type of items on the fixed memory block.</typeparam>
            <typeparam name="TDestination">Type of items on the reinterpreded memory block.</typeparam>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.TransformationContext`2._ctx">
            <summary>
            Fixed context.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.TransformationContext`2._length">
            <summary>
            Transformation length.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.TransformationContext`2._offset">
            <summary>
            Transformation offset.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.TransformationContext`2.#ctor(Rxmxnx.PInvoke.Extensions.Internal.FixedContext{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="ctx"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.FixedContext`1"/> instance.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation">
            <summary>
            This class helps to concatenate UTF-8 texts using UTF-8 encoding..
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.WriteDelegate">
            <summary>
            Delegate for writing text into the buffer.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation"/> object.</param>
            <param name="value"></param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Constructor.
            </summary>
            <param name="separator">UTF-8 text separator.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.Write(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Writes the concatenation of given text collection into the buffer.
            </summary>
            <param name="values">UTF-8 text collection.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes a text value into the buffer.
            </summary>
            <param name="value">Text value.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.Concat(System.Collections.Generic.IEnumerable{System.Byte[]},System.Byte[])">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any UTF-8 text passed.
            </summary>
            <param name="values">Next values.</param>
            <param name="initial">Initial Byte[] to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.Join(System.Byte,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any UTF-8 text passed.
            </summary>
            <param name="separator">UTF-8 char used as text separator.</param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.Join(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IEnumerable{System.Byte[]},System.Byte[])">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any UTF-8 text argument.
            </summary>
            <param name="separator">UTF-8 value used as text separator.</param>
            <param name="values">Next UTF-8 values.</param>
            <param name="initial">Initial UTF-8 text to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.InitalJoin(Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation,System.ReadOnlySpan{System.Byte})">
            <summary>
            Method for initial writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.Concat(Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation,System.ReadOnlySpan{System.Byte})">
            <summary>
            Method for next writing of a concatenation without separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation.Join(Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation,System.ReadOnlySpan{System.Byte})">
            <summary>
            Method for next writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8BinaryConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2">
            <summary>
            This class helps to concatenate texts using UTF-8 encoding.
            </summary>
            <typeparam name="T">Type of text input</typeparam>
            <typeparam name="TWrite">Type of write delegate.</typeparam>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2._mem">
            <summary>
            <see cref="T:System.IO.MemoryStream"/> used as buffer.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2._separator">
            <summary>
            Text separator.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2._write">
            <summary>
            Delegate used for write text;
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2._disposed">
            <summary>
            Disposed flag.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.#ctor(`0,`1,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="separator">Text separator.</param>
            <param name="initialJoin">Delegate for initial writing with separator.</param>
            <param name="concat">Delegate for writing without separator.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.GetInitialWriteMethod(`0,`1,`1)">
            <summary>
            Gets the initial value for write method delegate.
            </summary>
            <param name="separator"><typeparamref name="T"/> value.</param>
            <param name="initialJoin"><typeparamref name="TWrite"/> delegate for initial concatenation with separator.</param>
            <param name="concat"><typeparamref name="TWrite"/> delegate for concatenation without separator.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.IsEmpty(`0)">
            <summary>
            Indicates whether the specified <typeparamref name="T"/> is empty. 
            </summary>
            <param name="value"><typeparamref name="T"/> object.</param>
            <returns>
            <see langword="true"/> if the value parameter is empty; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.ToArray(System.Boolean)">
            <summary>
            Retrieves the binary data of UTF-8 text.
            </summary>
            <param name="nullTerminated">Indicates whether the UTF-8 text must be null-terminated.</param>
            <returns>Binary data of UTF-8 text</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.Dispose">
            <summary>
            Performs the dispose of current instance.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.GetBinaryData(System.Boolean)">
            <summary>
            Retrieves a copy of binary data into the buffer.
            </summary>
            <param name="nullTerminated">Indicates whether the UTF-8 text must be null-terminated.</param>
            <returns>Copy of binary data into the buffer.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.PrepareUtf8Text(System.ReadOnlySpan{System.Byte})">
            <summary>
            Prepares a UTF-8 text for concatenation process.
            </summary>
            <param name="span"><see cref="T:System.ReadOnlySpan`1"/> to UTF-8 text.</param>
            <returns><see cref="T:System.ReadOnlySpan`1"/> to UTF-8 binary data.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.PrepareUtf8Text(System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Prepares a UTF-8 text for concatenation process.
            </summary>
            <param name="span"><see cref="T:System.ReadOnlySpan`1"/> to UTF-8 text.</param>
            <param name="nullTerminated">Indicates whether the UTF-8 text must be null-terminated.</param>
            <returns><see cref="T:System.ReadOnlySpan`1"/> to UTF-8 binary data.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.GetInitialPosition(System.ReadOnlySpan{System.Byte})">
            <summary>
            Gets the initial position of the UTF-8 text.
            </summary>
            <param name="span"><see cref="T:System.ReadOnlySpan`1"/> to UTF-8 text.</param>
            <returns>Initial position of the UTF-8 text.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.IsNullUtf8Char(System.Byte@)">
            <summary>
            Indicates whether the given <see cref="T:System.Byte"/> is UTF-8 null character. 
            </summary>
            <param name="utf8Char">UTF-8 character.</param>
            <returns>
            <see langword="true"/> if <see cref="T:System.Byte"/> instance is a null character; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.IsBOMChar(System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Indicates whether the given <see cref="T:System.Byte"/> sequence is UTF-8 BOM character. 
            </summary>
            <param name="utf8Char1">First UTF-8 character.</param>
            <param name="utf8Char2">Second UTF-8 character.</param>
            <param name="utf8Char3">Third UTF-8 character.</param>
            <returns>
            <see langword="true"/> if <see cref="T:System.Byte"/> sequence is a UTF-8 BOM character; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.GetFinalLength(System.ReadOnlySpan{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Gets the final length of the UTF-8 text.
            </summary>
            <param name="span"><see cref="T:System.ReadOnlySpan`1"/> to UTF-8 text.</param>
            <param name="iPosition">Initial position of the UTF-8 text.</param>
            <param name="nullTerminated">Indicates whether the UTF-8 text must be null-terminated.</param>
            <returns>Final length of the UTF-8 text.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.Dispose(System.Boolean)">
            <summary>
            Dispose method.
            </summary>
            <param name="disposing">Indicates whether the caller method is <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8Concatenation`2.DisposeManaged(System.Boolean)">
            <summary>
            Performs the dispose of managed resources of current instance.
            </summary>
            <param name="disposing">Indicates whether the caller method is <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation">
            <summary>
            This class helps to concatenate <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> using UTF-8 encoding..
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.WriteDelegate">
            <summary>
            Delegate for writing text into the buffer.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation"/> object.</param>
            <param name="value"></param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.#ctor(Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Constructor.
            </summary>
            <param name="separator">Text separator.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.WriteAsync(Rxmxnx.PInvoke.Extensions.CString,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Writes the concatenation of given text collection and given initial value into the buffer.
            </summary>
            <param name="initial">Initial CString to concatenate.</param>
            <param name="values">Next values.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.WriteAsync(Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Writes a text value into the buffer.
            </summary>
            <param name="value">Text value.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.WriteAsync(System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Writes the concatenation of given text collection into the buffer.
            </summary>
            <param name="values">Text collection.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.ConcatAsync(System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString},Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="values">Next values.</param>
            <param name="initial">Initial CString to concatenate.</param>
            <returns>
            A task that represents the asynchronous concat operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.JoinAsync(System.Byte,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="separator"><see cref="T:System.Byte"/> used as text separator.</param>
            <param name="values">Next values.</param>
            <returns>
            A task that represents the asynchronous join operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.JoinAsync(Rxmxnx.PInvoke.Extensions.CString,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString},Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="separator"><see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> used as text separator.</param>
            <param name="values">Next values.</param>
            <param name="initial">Initial CString to concatenate.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.InitalJoinAsync(Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Method for initial writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.ConcatAsync(Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Method for next writing of a concatenation without separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation.Join(Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Method for next writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringAsyncConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation">
            <summary>
            This class helps to concatenate <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> using UTF-8 encoding..
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.WriteDelegate">
            <summary>
            Delegate for writing text into the buffer.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation"/> object.</param>
            <param name="value"></param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.#ctor(Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Constructor.
            </summary>
            <param name="separator">Text separator.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.Write(Rxmxnx.PInvoke.Extensions.CString,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Writes the concatenation of given text collection and given initial value into the buffer.
            </summary>
            <param name="initial">Initial CString to concatenate.</param>
            <param name="values">Next values.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.Write(Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Writes a text value into the buffer.
            </summary>
            <param name="value">Text value.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.Write(System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Writes the concatenation of given text collection into the buffer.
            </summary>
            <param name="values">Text collection.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.Concat(System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString},Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="values">Next values.</param>
            <param name="initial">Initial CString to concatenate.</param>
            <returns>The concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.Join(System.Byte,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="separator"><see cref="T:System.Byte"/> used as text separator.</param>
            <param name="values">Next values.</param>
            <returns>The concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.Join(Rxmxnx.PInvoke.Extensions.CString,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString},Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="separator"><see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> used as text separator.</param>
            <param name="values">Next values.</param>
            <param name="initial">Initial CString to concatenate.</param>
            <returns>The concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.InitalJoin(Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Method for initial writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.Concat(Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Method for next writing of a concatenation without separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation.Join(Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation,Rxmxnx.PInvoke.Extensions.CString)">
            <summary>
            Method for next writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8CStringConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation">
            <summary>
            This class helps to concatenate <see cref="T:System.String"/> using UTF-8 encoding..
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.WriteDelegate">
            <summary>
            Delegate for writing text into the buffer.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation"/> object.</param>
            <param name="value"></param>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation._writer">
            <summary>
            <see cref="T:System.IO.StreamWriter"/> used as UTF-8 writer.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation._disposed">
            <summary>
            Disposed flag.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="separator">Text separator.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.WriteAsync(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the concatenation of given text collection and given initial value into the buffer.
            </summary>
            <param name="initial">Initial string to concatenate.</param>
            <param name="values">Next values.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.WriteAsync(System.String)">
            <summary>
            Writes a text value into the buffer.
            </summary>
            <param name="value">Text value.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.WriteAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the concatenation of given text collection into the buffer.
            </summary>
            <param name="values">Text collection.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.DisposeManaged(System.Boolean)">
            <summary>
            Performs the dispose of managed resources of current instance.
            </summary>
            <param name="disposing">Indicates whether the caller method is <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.ConcatAsync(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="values">Next values.</param>
            <param name="initial">Initial string to concatenate.</param>
            <returns>
            A task that represents the asynchronous concat operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.JoinAsync(System.Char,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="separator"><see cref="T:System.Char"/> used as text separator.</param>
            <param name="values">Next values.</param>
            <returns>
            A task that represents the asynchronous join operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.JoinAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="separator"><see cref="T:System.String"/> used as text separator.</param>
            <param name="values">Next values.</param>
            <param name="initial">Initial string to concatenate.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.InitalJoinAsync(Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation,System.String)">
            <summary>
            Method for initial writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.ConcatAsync(Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation,System.String)">
            <summary>
            Method for next writing of a concatenation without separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation.Join(Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation,System.String)">
            <summary>
            Method for next writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringAsyncConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation">
            <summary>
            This class helps to concatenate <see cref="T:System.String"/> using UTF-8 encoding..
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.WriteDelegate">
            <summary>
            Delegate for writing text into the buffer.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation"/> object.</param>
            <param name="value"></param>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation._writer">
            <summary>
            <see cref="T:System.IO.StreamWriter"/> used as UTF-8 writer.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation._disposed">
            <summary>
            Disposed flag.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="separator">Text separator.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.Write(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the concatenation of given text collection and given initial value into the buffer.
            </summary>
            <param name="initial">Initial string to concatenate.</param>
            <param name="values">Next values.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.Write(System.String)">
            <summary>
            Writes a text value into the buffer.
            </summary>
            <param name="value">Text value.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.Write(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes the concatenation of given text collection into the buffer.
            </summary>
            <param name="values">Text collection.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.DisposeManaged(System.Boolean)">
            <summary>
            Performs the dispose of managed resources of current instance.
            </summary>
            <param name="disposing">Indicates whether the caller method is <see cref="M:System.IDisposable.Dispose"/>.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.Concat(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="values">Next values.</param>
            <param name="initial">Initial string to concatenate.</param>
            <returns>The concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.Join(System.Char,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="separator"><see cref="T:System.Char"/> used as text separator.</param>
            <param name="values">Next values.</param>
            <returns>The concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.Join(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates an <see cref="T:System.Byte"/> array which contains the concatenation of any text passed 
            using UTF-8 encoding.
            </summary>
            <param name="separator"><see cref="T:System.String"/> used as text separator.</param>
            <param name="values">Next values.</param>
            <param name="initial">Initial string to concatenate.</param>
            <returns>The concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.InitalJoin(Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation,System.String)">
            <summary>
            Method for initial writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.Concat(Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation,System.String)">
            <summary>
            Method for next writing of a concatenation without separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation.Join(Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation,System.String)">
            <summary>
            Method for next writing of a concatenation with separator.
            </summary>
            <param name="helper"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.Utf8StringConcatenation"/></param>
            <param name="value">Text to write.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1">
            <summary>
            This class represents an arbitrary memory region in which a sequence of 
            <typeparamref name="T"/> values is found.
            </summary>
            <typeparam name="T">Unmanaged type of sequence item.</typeparam>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.Position(System.Int32)">
            <summary>
            Gets an item from the memory region at the specified zero-based <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <exception cref="T:System.IndexOutOfRangeException">
            <paramref name="index"/> is less then zero or greater than or equal to 
            memory region length.
            </exception>
            <returns>The element from the memory region.</returns>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.IsSegmented">
            <summary>
            Indicates whether current memory region is segmented.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ToArray">
            <summary>
            Copies the contents of this memory region into a new array.
            </summary>
            <returns>An array containing the data in the current memory region.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.AsArray">
            <summary>
            Gets an array from this memory region.
            </summary>
            <returns>An array containing the data in the current memory region.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.AsSpan">
            <summary>
            Creates a new read-only span over this memory region.
            </summary>
            <returns>The read-only span representation of the memory region.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.GetEnumerator">
            <summary>
            Returns an enumerator for this memory region.
            </summary>
            <returns>An enumerator for this memory region.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.op_Implicit(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0})~System.ReadOnlySpan{`0}">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.op_Explicit(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0})~`0[]">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.Create(`0[])">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance from an array of 
            <typeparamref name="T"/> values.
            </summary>
            <param name="array">Array of <typeparamref name="T"/> values.</param>
            <returns>A new <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.Create(System.IntPtr,System.Int32)">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance from a pointer to memory region and 
            the amount of values in sequence.
            </summary>
            <param name="ptr">Pointer to memory region.</param>
            <param name="length">Amount of values in sequence.</param>
            <returns>A new <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.Create(Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc{`0})">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance from a <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1"/>
            delegate.
            </summary>
            <param name="func"><see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1"/> delegate.</param>
            <returns>A new <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.Create(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0},System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance whose offset is <paramref name="offset"/>
            and whose length is <paramref name="length"/>.
            </summary>
            <param name="region">A <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance.</param>
            <param name="offset">Offset for range.</param>
            <param name="length">Length of range.</param>
            <returns>A new <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1"/> instance.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.FuncRegion">
            <summary>
            This class represents a memory region in which an array of <typeparamref name="T"/> 
            values is found.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.FuncRegion._func">
            <summary>
            Internal <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1"/> instance. 
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.FuncRegion.#ctor(Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="func">Internal <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1"/> instance. </param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.FuncRegion.AsSpan">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.FuncRegion.AsReadOnlySpanFunc">
            <summary>
            Gets a function from this memory region.
            </summary>
            <returns>A function from this memory region.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion">
            <summary>
            This class represents a memory region in which an array of <typeparamref name="T"/> 
            values is found.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion._array">
            <summary>
            Internal <typeparamref name="T"/> array.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion.#ctor(`0[])">
            <summary>
            Constructor.
            </summary>
            <param name="array"><typeparamref name="T"/> array instance.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion.AsArray">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion.AsSpan">
            <inheritdoc/>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.NativeRegion">
            <summary>
            This class represents a native memory region in which a sequence of <typeparamref name="T"/> 
            values is found.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.NativeRegion.Empty">
            <summary>
            <see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.NativeRegion"/> empty instance.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.NativeRegion._ptr">
            <summary>
            Pointer to native memory region.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.NativeRegion._length">
            <summary>
            Length of <typeparamref name="T"/> sequence.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.NativeRegion.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="ptr">Pointer to native memory region.</param>
            <param name="length">Length of <typeparamref name="T"/> sequence.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.NativeRegion.AsSpan">
            <inheritdoc/>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion">
            <summary>
            This class represents a memory region in which an array of <typeparamref name="T"/> 
            values is found.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion._func">
            <summary>
            Internal <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`1"/> instance. 
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion._offset">
            <summary>
            Internal offset.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion._end">
            <summary>
            Internal length.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion._isSegmented">
            <summary>
            Indicates whether current instance is segmented.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion.IsSegmented">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion.#ctor(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0}.FuncRegion,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="region"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.FuncRegion"/> instance. </param>
            <param name="offset">Offset for range.</param>
            <param name="length">Length of range.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion.#ctor(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0}.SegmentedFuncRegion,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="region"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion"/> instance.</param>
            <param name="offset">Offset for range.</param>
            <param name="length">Length of range.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion.AsSpan">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedFuncRegion.IsSegmentedRegion(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0}.SegmentedFuncRegion)">
            <summary>
            Indicates whether region is segmented.
            </summary>
            <param name="region"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion"/> instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="region"/> is segmented; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion">
            <summary>
            This class represents a memory region in which an segmented array of <typeparamref name="T"/> 
            values is found.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion._array">
            <summary>
            Internal <typeparamref name="T"/> array.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion._offset">
            <summary>
            Internal offset.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion._end">
            <summary>
            Internal length.
            </summary>
        </member>
        <member name="F:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion._isSegmented">
            <summary>
            Indicates whether current instance is segmented.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion.IsSegmented">
            <inheritdoc/>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion.#ctor(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0}.ManagedRegion,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="region"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion"/> instance.</param>
            <param name="offset">Offset for range.</param>
            <param name="length">Length of range.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion.#ctor(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0}.SegmentedManagedRegion,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="region"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.ManagedRegion"/> instance.</param>
            <param name="offset">Offset for range.</param>
            <param name="length">Length of range.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion.AsArray">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion.AsSpan">
            <inheritdoc/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion.IsSegmentedRegion(Rxmxnx.PInvoke.Extensions.Internal.ValueRegion{`0}.SegmentedManagedRegion)">
            <summary>
            Indicates whether region is segmented.
            </summary>
            <param name="region"><see cref="T:Rxmxnx.PInvoke.Extensions.Internal.ValueRegion`1.SegmentedManagedRegion"/> instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="region"/> is segmented; otherwise, 
            <see langword="false"/>.
            </returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1">
            <summary>
            This interface represents a context from read-only memory block fixing.
            </summary>
            <typeparam name="T">Type of items on the read-only fixed memory block.</typeparam>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1.Values">
            <summary>
            A read-only <typeparamref name="T"/> span over the fixed memory block.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1.BinaryValues">
            <summary>
            A read-only binary span over the fixed memory block.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.IReadOnlyFixedContext`1.Transformation``1">
            <summary>
            Performs a reinterpretation of <typeparamref name="T"/> fixed memory block as 
            <typeparamref name="TDestination"/> memory block.
            </summary>
            <typeparam name="TDestination">Type of items on the reinterpreded memory block.</typeparam>
            <returns>A <see cref="T:Rxmxnx.PInvoke.Extensions.ITransformationContext`2"/> instance.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.IReadOnlyTransformationContext`2">
            <summary>
            This interface represents the reinterpretation of a <typeparamref name="TSource"/> fixed memory 
            block as a <typeparamref name="TDestination"/> memory block.
            </summary>
            <typeparam name="TSource">Type of items on the fixed memory block.</typeparam>
            <typeparam name="TDestination">Type of items on the reinterpreded memory block.</typeparam>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IReadOnlyTransformationContext`2.Context">
            <summary>
            Fixed context instance.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IReadOnlyTransformationContext`2.Values">
            <summary>
            A <typeparamref name="TDestination"/> span over the fixed memory block. 
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IReadOnlyTransformationContext`2.ResidualBytes">
            <summary>
            A binary span over the residual fixed memory block. 
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.IReferenceable`1">
            <summary>
            This interface exposes a read-only reference to <typeparamref name="T"/> object.
            </summary>
            <typeparam name="T">Type of the referenced object.</typeparam>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IReferenceable`1.Reference">
            <summary>
            Reference to instance <typeparamref name="T"/> object.
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.IReferenceableWrapper`1">
            <summary>
            This interface exposes a wrapper for <typeparamref name="T"/> object that can be 
            referenced.
            </summary>
            <typeparam name="T">Type of both wrapped and referenced value.</typeparam>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ITransformationContext`2">
            <summary>
            This interface represents the reinterpretation of a <typeparamref name="TSource"/> fixed memory 
            block as a <typeparamref name="TDestination"/> memory block.
            </summary>
            <typeparam name="TSource">Type of items on the fixed memory block.</typeparam>
            <typeparam name="TDestination">Type of items on the reinterpreded memory block.</typeparam>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.ITransformationContext`2.Context">
            <summary>
            Fixed context instance.
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.ITransformationContext`2.Values">
            <summary>
            A <typeparamref name="TDestination"/> span over the fixed memory block. 
            </summary>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.ITransformationContext`2.ResidualBytes">
            <summary>
            A binary span over the residual fixed memory block. 
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.ITransformationContext`2.AsReadOnly">
            <summary>
            Retrieves the current context as read-only fixed memory block transformation context.
            </summary>
            <returns>A <see cref="T:Rxmxnx.PInvoke.Extensions.ITransformationContext`2"/> instance.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.IWrapper`1">
            <summary>
            This interface exposes a wrapper for <typeparamref name="T"/> object.
            </summary>
            <typeparam name="T">Type of wrapped value.</typeparam>
        </member>
        <member name="P:Rxmxnx.PInvoke.Extensions.IWrapper`1.Value">
            <summary>
            Wrapped <typeparamref name="T"/> object.
            </summary>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions">
            <summary>
            Provides a set of extensions for basic operations with <see cref="T:System.Span`1"/> and <see cref="T:System.ReadOnlySpan`1"/> instances.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.AsIntPtr``1(System.Span{``0})">
            <summary>
            Creates a <see cref="T:System.IntPtr"/> pointer from <see cref="T:System.Span`1"/> instance.
            </summary>
            <typeparam name="T">
            <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> values contened into the contiguous region of memory.
            </typeparam>
            <param name="span">The span from which the pointer is retrieved.</param>
            <returns><see cref="T:System.IntPtr"/> pointer.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.AsIntPtr``1(System.ReadOnlySpan{``0})">
            <summary>
            Creates a <see cref="T:System.IntPtr"/> pointer from <see cref="T:System.ReadOnlySpan`1"/> instance.
            </summary>
            <typeparam name="T">
            <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> values contened into the contiguous region of memory.
            </typeparam>
            <param name="readonlySpan">The read-only span from which the pointer is retrieved.</param>
            <returns><see cref="T:System.IntPtr"/> pointer.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.AsUIntPtr``1(System.Span{``0})">
            <summary>
            Creates a <see cref="T:System.UIntPtr"/> pointer from <see cref="T:System.Span`1"/> instance.
            </summary>
            <typeparam name="T">
            <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> values contened into the contiguous region of memory.
            </typeparam>
            <param name="span">The span from which the pointer is retrieved.</param>
            <returns><see cref="T:System.UIntPtr"/> pointer.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.AsUIntPtr``1(System.ReadOnlySpan{``0})">
            <summary>
            Creates a <see cref="T:System.UIntPtr"/> pointer from <see cref="T:System.ReadOnlySpan`1"/> instance.
            </summary>
            <typeparam name="T">
            <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> values contened into the contiguous region of memory.
            </typeparam>
            <param name="readonlySpan">The read-only span from which the pointer is retrieved.</param>
            <returns><see cref="T:System.UIntPtr"/> pointer.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.GetConditionalIntPtrZero(System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Nullable`1"/> from a given condition. 
            </summary>
            <param name="condition">Indicates whether the <see cref="F:System.IntPtr.Zero"/> must be returned.</param>
            <returns>
            <see cref="F:System.IntPtr.Zero"/> if <paramref name="condition"/> is <see langword="true"/>; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.GetConditionalUIntPtrZero(System.Boolean)">
            <summary>
            Gets a <see cref="T:System.Nullable`1"/> from a given condition. 
            </summary>
            <param name="condition">Indicates whether the <see cref="F:System.UIntPtr.Zero"/> must be returned.</param>
            <returns>
            <see cref="F:System.UIntPtr.Zero"/> if <paramref name="condition"/> is <see langword="true"/>; otherwise,
            <see langword="null"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.GetDestinationSpan``2(System.Void*,System.Int32,System.Span{System.Byte}@)">
            <summary>
            Retrieves a <typeparamref name="TDestination"/> span from <paramref name="sPtr"/> which references
            to a <typeparamref name="TSource"/> span whose length is <paramref name="sPtr"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <param name="sPtr">Source span pointer.</param>
            <param name="sLength">Source span length.</param>
            <param name="rSpan">Output. The residual span of bytes.</param>
            <returns>Destination span.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.GetDestinationSpan``2(System.Void*,System.Int32,System.ReadOnlySpan{System.Byte}@)">
            <summary>
            Retrieves a <typeparamref name="TDestination"/> span from <paramref name="sPtr"/> which references
            to a <typeparamref name="TSource"/> read-only span whose length is <paramref name="sPtr"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <param name="sPtr">Source read-only span pointer.</param>
            <param name="sLength">Source read-only span length.</param>
            <param name="rSpan">Output. The residual span of bytes.</param>
            <returns>Destination read-only span.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.GetResidualPointer``2(System.Void*,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the memory pointer to residual bytes for this transformation.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <param name="sPtr">Source span pointer.</param>
            <param name="sLength">Source span length.</param>
            <param name="length">Output. Principal span length.</param>
            <param name="rLength">Output. Residual span length.</param>
            <returns>Memory pointer to residual bytes for this transformation.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.BinaryTransform``2(System.Span{System.Byte},``1,Rxmxnx.PInvoke.Extensions.SpanTransformAction{``0,``1})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.Span`1"/> instance and 
            invokes <paramref name="action"/>.
            </summary>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <param name="span">A binary writable memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.SpanTransformAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.BinaryTransform``2(System.ReadOnlySpan{System.Byte},``1,Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformAction{``0,``1})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.ReadOnlySpan`1"/> instance and 
            invokes <paramref name="action"/>.
            </summary>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <param name="span">A binary read-only memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.BinaryTransform``2(System.Span{``0},``1,Rxmxnx.PInvoke.Extensions.BinarySpanTransformAction{``1})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.Span`1"/> instance and 
            invokes <paramref name="action"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <param name="span">A <typeparamref name="TSource"/> writable memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.BinarySpanTransformAction`1"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.BinaryTransform``2(System.ReadOnlySpan{``0},``1,Rxmxnx.PInvoke.Extensions.BinaryReadOnlySpanTransformAction{``1})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.ReadOnlySpan`1"/> instance and 
            invokes <paramref name="action"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <param name="span">A <typeparamref name="TSource"/> read-only memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.BinaryReadOnlySpanTransformAction`1"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.BinaryTransform``3(System.Span{System.Byte},``1,Rxmxnx.PInvoke.Extensions.SpanTransformFunc{``0,``1,``2})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.Span`1"/> instance and 
            invokes <paramref name="func"/>.
            </summary>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A binary writable memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.SpanTransformFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.BinaryTransform``3(System.ReadOnlySpan{System.Byte},``1,Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformFunc{``0,``1,``2})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.ReadOnlySpan`1"/> instance and 
            invokes <paramref name="func"/>.
            </summary>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A binary read-only memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.BinaryTransform``3(System.Span{``0},``1,Rxmxnx.PInvoke.Extensions.BinarySpanTransformFunc{``1,``2})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.Span`1"/> instance and 
            invokes <paramref name="func"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A <typeparamref name="TSource"/> writable memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.BinarySpanTransformFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.BinaryTransform``3(System.ReadOnlySpan{``0},``1,Rxmxnx.PInvoke.Extensions.BinaryReadOnlySpanTransformFunc{``1,``2})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.ReadOnlySpan`1"/> instance and 
            invokes <paramref name="func"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A <typeparamref name="TSource"/> read-only memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.BinaryReadOnlySpanTransformFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.Transform``3(System.Span{``0},``2,Rxmxnx.PInvoke.Extensions.SpanTransformAction{``1,``2})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.Span`1"/> instance and 
            invokes <paramref name="action"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <param name="span">A <typeparamref name="TSource"/> writable memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.SpanTransformAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.Transform``3(System.ReadOnlySpan{``0},``2,Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformAction{``1,``2})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.ReadOnlySpan`1"/> instance and 
            invokes <paramref name="action"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <param name="span">A <typeparamref name="TSource"/> read-only memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.Transform``4(System.Span{``0},``2,Rxmxnx.PInvoke.Extensions.SpanTransformFunc{``1,``2,``3})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.Span`1"/> instance and 
            invokes <paramref name="func"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A <typeparamref name="TSource"/> writable memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.SpanTransformFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.Transform``4(System.ReadOnlySpan{``0},``2,Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformFunc{``1,``2,``3})">
            <summary>
            Transforms <paramref name="span"/> to a <see cref="T:System.ReadOnlySpan`1"/> instance and 
            invokes <paramref name="func"/>.
            </summary>
            <typeparam name="TSource">The type of the objects in the source span.</typeparam>
            <typeparam name="TDestination">The type of the objects in the destination span.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A <typeparamref name="TSource"/> read-only memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanTransformFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``1(System.Span{``0},Rxmxnx.PInvoke.Extensions.FixedAction{``0})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedAction`1"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``1(System.Span{``0},Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{``0})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``1(System.ReadOnlySpan{``0},Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{``0})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``2(System.Span{``0},``1,Rxmxnx.PInvoke.Extensions.FixedAction{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``2(System.Span{``0},``1,System.Buffers.SpanAction{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:System.Buffers.SpanAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``2(System.Span{``0},``1,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``2(System.ReadOnlySpan{``0},``1,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``2(System.ReadOnlySpan{``0},``1,System.Buffers.ReadOnlySpanAction{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:System.Buffers.ReadOnlySpanAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``2(System.Span{``0},Rxmxnx.PInvoke.Extensions.FixedFunc{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``2(System.Span{``0},Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``2(System.ReadOnlySpan{``0},Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``3(System.Span{``0},``1,Rxmxnx.PInvoke.Extensions.FixedFunc{``0,``1,``2})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``3(System.Span{``0},``1,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{``0,``1,``2})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``3(System.Span{``0},``1,Rxmxnx.PInvoke.Extensions.SpanFunc{``0,``1,``2})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.SpanFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``3(System.ReadOnlySpan{``0},``1,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{``0,``1,``2})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.MemoryBlockExtensions.WithSafeFixed``3(System.ReadOnlySpan{``0},``1,Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc{``0,``1,``2})">
            <summary>
            Prevents the garbage collector from relocating the block of memory represented by 
            <paramref name="span"/> and fixes its memory address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the span.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="span">A read-only span of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlySpanFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.NativeUtilities">
            <summary>
            Provides a set of utilities for exchange data within the P/Invoke context.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.NativeUtilities.SizeOf``1">
            <summary>
            Retrieves the size of <typeparamref name="T"/> structure.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <returns>Size of <typeparamref name="T"/> structure.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.NativeUtilities.LoadNativeLib(System.String,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
            <summary>
            Provides a high-level API for loading a native library.
            </summary>
            <param name="libraryName">The name of the native library to be loaded.</param>
            <param name="searchPath">The search path.</param>
            <returns>The OS handle for the loaded native library.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.NativeUtilities.LoadNativeLib(System.String,System.EventHandler@,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
            <summary>
            Provides a high-level API for loading a native library.
            </summary>
            <param name="libraryName">The name of the native library to be loaded.</param>
            <param name="unloadEvent">
            <see cref="T:System.EventHandler"/> delegate to append <see cref="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)"/> invocation.
            </param>
            <param name="searchPath">The search path.</param>
            <returns>The OS handle for the loaded native library.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.NativeUtilities.GetNativeMethod``1(System.IntPtr,System.String)">
            <summary>
            Gets the <typeparamref name="T"/> delegate of an exported symbol.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handle">The native library OS handle.</param>
            <param name="name">The name of the exported symbol.</param>
            <returns><typeparamref name="T"/> delegate.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.NativeUtilities.AsBytes``1(``0@)">
            <summary>
            Retrieves a <see cref="T:System.Byte"/> array from the given <typeparamref name="T"/> value.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <param name="value"><typeparamref name="T"/> value.</param>
            <returns><see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.NativeUtilities.CreateArray``2(System.Int32,``1,System.Buffers.SpanAction{``0,``1})">
            <summary>
            Creates a new <typeparamref name="T"/> array with a specific length and initializes it after 
            creation by using the specified callback.
            </summary>
            <typeparam name="T">The type of elements in the array.</typeparam>
            <typeparam name="TState">The type of the element to pass to <paramref name="action"/>.</typeparam>
            <param name="length">The length of the array to create.</param>
            <param name="state">The element to pass to <paramref name="action"/>.</param>
            <param name="action">A callback to initialize the array.</param>
            <returns>The created array.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.NativeUtilities.BinaryCopyTo``1(``0@,System.Span{System.Byte},System.Int32)">
            <summary>
            Preforms a binary copy of <paramref name="value"/> to <paramref name="destination"/> span.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <param name="value"><typeparamref name="T"/> value.</param>
            <param name="destination">Destination <see cref="T:System.Span`1"/> instance.</param>
            <param name="offset">
            The offset in <paramref name="destination"/> at which <paramref name="value"/> copying begins.
            </param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.NativeUtilities.WriteSpan``2(System.Span{``0},``1,System.Buffers.SpanAction{``0,``1})">
            <summary>
            Writes <paramref name="span"/> using <paramref name="arg"/> and <paramref name="action"/>.
            </summary>
            <typeparam name="T">Unmanaged type of elements in <paramref name="span"/>.</typeparam>
            <typeparam name="TArg">Type of state object.</typeparam>
            <param name="span">A <typeparamref name="T"/> writable memory block.</param>
            <param name="arg">A <typeparamref name="TArg"/> instance.</param>
            <param name="action">A <see cref="T:System.Buffers.SpanAction`2"/> delegate.</param>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.PointerExtensions">
            <summary>
            Provides a set of extensions for basic operations with <see cref="T:System.IntPtr"/> and <see cref="T:System.UIntPtr"/> instances.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.IsZero(System.IntPtr)">
            <summary>
            Indicates whether the <see cref="T:System.IntPtr"/> pointer is a <see langword="null"/> memory reference.
            </summary>
            <param name="ptr"><see cref="T:System.IntPtr"/> pointer.</param>
            <returns>
            <see langword="true"/> if <see cref="T:System.IntPtr"/> instance is a <see langword="null"/> memory reference; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.IsZero(System.UIntPtr)">
            <summary>
            Indicates whether the <see cref="T:System.UIntPtr"/> pointer is a <see langword="null"/> memory reference.
            </summary>
            <param name="uptr"><see cref="T:System.UIntPtr"/> pointer.</param>
            <returns>
            <see langword="true"/> if <see cref="T:System.UIntPtr"/> instance is a <see langword="null"/> memory reference; 
            otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsUIntPtr(System.IntPtr)">
            <summary>
            Creates a <see cref="T:System.UIntPtr"/> value from given <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="ptr"><see cref="T:System.IntPtr"/> value.</param>
            <returns><see cref="T:System.UIntPtr"/> value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsIntPtr(System.UIntPtr)">
            <summary>
            Creates a <see cref="T:System.IntPtr"/> value from given <see cref="T:System.UIntPtr"/> value.
            </summary>
            <param name="uptr"><see cref="T:System.UIntPtr"/> value.</param>
            <returns><see cref="T:System.IntPtr"/> value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsString(System.IntPtr,System.Int32)">
            <summary>
            Creates a <see cref="T:System.String"/> instance taking the memory reference of <see cref="T:System.IntPtr"/> 
            value as the UTF-16 text starting point.
            </summary>
            <param name="ptr"><see cref="T:System.IntPtr"/> pointer to starting point of UTF-16 text.</param>
            <param name="length">Optional. Number of <see cref="T:System.Char"/> values contained into the UTF-16 text.</param>
            <returns>
            <see cref="T:System.String"/> representation of UTF-16 text.
            If the <paramref name="length"/> value is great than zero the lenght of the resulting <see cref="T:System.String"/> instance 
            will equal to this value; otherwise, will be equal to the distance between the starting point of UTF-16 text and the
            first null character (\0) position.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsString(System.UIntPtr,System.Int32)">
            <summary>
            Creates a <see cref="T:System.String"/> instance taking the memory reference of <see cref="T:System.UIntPtr"/> 
            value as the UTF-16 text starting point.
            </summary>
            <param name="uptr"><see cref="T:System.UIntPtr"/> pointer to starting point of UTF-16 text.</param>
            <param name="length">Optional. Number of <see cref="T:System.Char"/> values contained into the UTF-16 text.</param>
            <returns>
            <see cref="T:System.String"/> representation of UTF-16 text.
            If the <paramref name="length"/> value is great than zero the lenght of the resulting <see cref="T:System.String"/> instance 
            will equal to this value; otherwise, will be equal to the distance between the starting point of UTF-16 text and the
            first null character (\0) position.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsReadOnlySpan``1(System.IntPtr,System.Int32)">
            <summary>
            Creates a <see cref="T:System.ReadOnlySpan`1"/> instance from <see cref="T:System.IntPtr"/> pointer.
            </summary>
            <typeparam name="T">
            <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> values contened into the contiguous region of memory.
            </typeparam>
            <param name="ptr"><see cref="T:System.IntPtr"/> pointer.</param>
            <param name="length">
            Number of <typeparamref name="T"/> <see langword="unmanaged"/> values to retrive form the contiguous region of memory.
            </param>
            <returns><see cref="T:System.ReadOnlySpan`1"/> instance.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsReadOnlySpan``1(System.UIntPtr,System.Int32)">
            <summary>
            Creates a <see cref="T:System.ReadOnlySpan`1"/> instance from <see cref="T:System.UIntPtr"/> pointer.
            </summary>
            <typeparam name="T">
            <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> values contened into the contiguous region of memory.
            </typeparam>
            <param name="uptr"><see cref="T:System.UIntPtr"/> pointer.</param>
            <param name="length">
            Number of <typeparamref name="T"/> <see langword="unmanaged"/> values to retrive form the contiguous region of memory.
            </param>
            <returns><see cref="T:System.ReadOnlySpan`1"/> instance.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsDelegate``1(System.IntPtr)">
            <summary>
            Creates an <typeparamref name="T"/> delegate from from <see cref="T:System.IntPtr"/> pointer.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Delegate"/> referenced into the pointer.</typeparam>
            <param name="ptr"><see cref="T:System.IntPtr"/> pointer.</param>
            <returns><typeparamref name="T"/> delegate.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsDelegate``1(System.UIntPtr)">
            <summary>
            Creates an <typeparamref name="T"/> delegate from from <see cref="T:System.UIntPtr"/> pointer.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Delegate"/> referenced into the pointer.</typeparam>
            <param name="uptr"><see cref="T:System.UIntPtr"/> pointer.</param>
            <returns><typeparamref name="T"/> delegate.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsReference``1(System.IntPtr)">
            <summary>
            Creates a memory reference to a <typeparamref name="T"/> <see langword="unmanaged"/> value from 
            a <see cref="T:System.IntPtr"/> pointer.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of the <see langword="unmanaged"/> referenced value.</typeparam>
            <param name="ptr"><see cref="T:System.IntPtr"/> pointer.</param>
            <returns>Memory reference to a <typeparamref name="T"/> <see langword="unmanaged"/> value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.AsReference``1(System.UIntPtr)">
            <summary>
            Creates a memory reference to a <typeparamref name="T"/> <see langword="unmanaged"/> value from 
            a <see cref="T:System.UIntPtr"/> pointer.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of the <see langword="unmanaged"/> referenced value.</typeparam>
            <param name="uptr"><see cref="T:System.UIntPtr"/> pointer.</param>
            <returns>Memory reference to a <typeparamref name="T"/> <see langword="unmanaged"/> value.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.ValidateLengthParameter(System.Int32,System.String)">
            <summary>
            Validates an memory length parameter.
            </summary>
            <param name="length">Memory length value.</param>
            <param name="lengthParameterName">Name of the memory length parameter.</param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.GetStringFromCharPointer(System.Char*,System.Int32)">
            <summary>
            Creates a <see cref="T:System.String"/> instance taking a <see cref="T:System.Char"/> pointer as the UTF-16 text starting point.
            </summary>
            <param name="chrPtr"><see cref="T:System.Char"/> pointer.</param>
            <param name="length">Number of <see cref="T:System.Char"/> values contained into the UTF-16 text.</param>
            <see cref="T:System.String"/> representation of UTF-16 text.
            <returns>
            If the <paramref name="length"/> value is great than zero the lenght of the resulting <see cref="T:System.String"/> instance 
            will equal to this value; otherwise, will be equal to the distance between the starting point of UTF-16 text and the
            first null character (\0) position.
            </returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.PointerExtensions.GetReadOnlySpanFromPointer``1(System.Void*,System.Int32)">
            <summary>
            Creates a <see cref="T:System.ReadOnlySpan`1"/> instance from a native pointer.
            </summary>
            <typeparam name="T">
            <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> values contened into the contiguous region of memory.
            </typeparam>
            <param name="ptr">Native pointer.</param>
            <param name="length">
            Number of <typeparamref name="T"/> <see langword="unmanaged"/> values to retrive form the contiguous region of memory.
            </param>
            <returns><see cref="T:System.ReadOnlySpan`1"/> instance.</returns>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.ReferenceExtensions">
            <summary>
            Provides a set of extensions for basic operations with memory references to <see cref="T:System.ValueType"/> 
            <see langword="unmanaged"/> values.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.ReferenceExtensions.AsIntPtr``1(``0@)">
            <summary>
            Creates a <see cref="T:System.IntPtr"/> pointer from a memory reference to a <typeparamref name="T"/> 
            <see langword="unmanaged"/> value.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of the referenced <see langword="unmanaged"/> value.</typeparam>
            <param name="refValue">Memory reference to a <typeparamref name="T"/> <see langword="unmanaged"/> value.</param>
            <returns><see cref="T:System.IntPtr"/> pointer.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.ReferenceExtensions.AsUIntPtr``1(``0@)">
            <summary>
            Creates a <see cref="T:System.UIntPtr"/> pointer from a memory reference to a <typeparamref name="T"/> 
            <see langword="unmanaged"/> value.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of the referenced <see langword="unmanaged"/> value.</typeparam>
            <param name="refValue">Memory reference to a <typeparamref name="T"/> <see langword="unmanaged"/> value.</param>
            <returns><see cref="T:System.UIntPtr"/> pointer.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.ReferenceExtensions.AsReferenceOf``2(``0@)">
            <summary>
            Creates a memory reference to a <typeparamref name="TDestination"/> <see langword="unmanaged"/> value from 
            an exising memory reference to a <typeparamref name="TSource"/> <see langword="unmanaged"/> value.
            </summary>
            <typeparam name="TSource"><see cref="T:System.ValueType"/> of the referenced <see langword="unmanaged"/> source value.</typeparam>
            <typeparam name="TDestination"><see cref="T:System.ValueType"/> of the destination reference.</typeparam>
            <param name="refValue">Memory reference to a <typeparamref name="TSource"/> <see langword="unmanaged"/> value.</param>
            <returns>A memory reference to a <typeparamref name="TDestination"/> <see langword="unmanaged"/> value.</returns>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.ReferenceExtensions.AsBinarySpan``1(``0@)">
            <summary>
            Creates a <see cref="T:System.Span`1"/> from an exising memory reference to a <typeparamref name="TSource"/> 
            <see langword="unmanaged"/> value.
            </summary>
            <typeparam name="TSource"><see cref="T:System.ValueType"/> of the referenced <see langword="unmanaged"/> source value.</typeparam>
            <param name="refValue">>Memory reference to a <typeparamref name="TSource"/> <see langword="unmanaged"/> value.</param>
            <returns>
            A <see cref="T:System.Span`1"/> from an exising memory reference to a <typeparamref name="TSource"/> 
            <see langword="unmanaged"/> value.
            </returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.StringExtensions">
            <summary>
            Provides a set of extensions for basic operations with <see cref="T:System.String"/> and <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> 
            instances.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.AsUtf8Span(System.String)">
            <summary>
            Encodes the UTF-16 text using the UTF-8 charset and retrieves the read-only span which 
            references to UTF-8 text.
            </summary>
            <param name="str"><see cref="T:System.String"/> representation of UTF-16 text.</param>
            <returns>The read-only span which references to UTF-8 text.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.AsUtf8(System.String)">
            <summary>
            Encodes the UTF-16 text using the UTF-8 charset and retrieves the <see cref="T:System.Byte"/> array with 
            UTF-8 text.
            </summary>
            <param name="str"><see cref="T:System.String"/> representation of UTF-16 text.</param>
            <returns><see cref="T:System.Byte"/> array with UTF-8 text.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.WithSafeFixed(System.String,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{System.Char})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="str"/> and fixes its memory 
            address until <paramref name="action"/> finish.
            </summary>
            <param name="str">A UTF-16 text instance.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.WithSafeFixed``1(System.String,``0,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{System.Char,``0})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="str"/> and fixes its memory 
            address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="str">A UTF-16 text instance.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.WithSafeFixed``1(System.String,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{System.Char,``0})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="str"/> and fixes its memory 
            address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="str">A UTF-16 text instance.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.WithSafeFixed``2(System.String,``0,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{System.Char,``0,``1})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="str"/> and fixes its memory 
            address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="str">A UTF-16 text instance.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.ConcatUtf8(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a collection of <see cref="T:System.String"/>.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.ConcatUtf8Async(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a collection of <see cref="T:System.String"/>.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A task that represents the asynchronous concat operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.Concat(System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Concatenates the members of a collection of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.StringExtensions.ConcatAsync(System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Concatenates the members of a collection of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>.
            </summary>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A task that represents the asynchronous concat operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.TextUtilities">
            <summary>
            Provides a set of utilities for texts.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8(System.String,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
            <param name="separator">
            The text to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8(System.Char,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
            <param name="separator">
            The character to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a collection of <see cref="T:System.String"/>, using the specified 
            separator between each member.
            </summary>
            <param name="separator"><see cref="T:System.String"/> used as text separator.</param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8(System.Char,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a collection of <see cref="T:System.String"/>, using the specified 
            separator between each member.
            </summary>
            <param name="separator"><see cref="T:System.Char"/> used as text separator.</param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8(System.ReadOnlySpan{System.Byte},System.Byte[][])">
            <summary>
            Concatenates an array of UTF-8 texts, using the specified separator between each member.
            </summary>
            <param name="separator">
            The text to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8(System.Byte,System.Byte[][])">
            <summary>
            Concatenates an array of UTF-8 texts, using the specified separator between each member.
            </summary>
            <param name="separator">
            The Byteacter to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8(System.ReadOnlySpan{System.Byte},System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Concatenates the members of a collection of UTF-8 texts, using the specified 
            separator between each member.
            </summary>
            <param name="separator">UTF-8 text used as text separator.</param>
            <param name="values">A collection that contains the UTF-8 texts to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8(System.Byte,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Concatenates the members of a collection of UTF-8 texts, using the specified 
            separator between each member.
            </summary>
            <param name="separator"><see cref="T:System.Byte"/> used as text separator.</param>
            <param name="values">A collection that contains the UTF-8 texts to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8Async(System.String,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
            <param name="separator">
            The text to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>
            A task that represents the asynchronous join operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8Async(System.Char,System.String[])">
            <summary>
            Concatenates an array of strings, using the specified separator between each member.
            </summary>
            <param name="separator">
            The character to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>
            A task that represents the asynchronous join operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8Async(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a collection of <see cref="T:System.String"/>, using the specified 
            separator between each member.
            </summary>
            <param name="separator"><see cref="T:System.String"/> used as text separator.</param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A task that represents the asynchronous join operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinUtf8Async(System.Char,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Concatenates the members of a collection of <see cref="T:System.String"/>, using the specified 
            separator between each member.
            </summary>
            <param name="separator"><see cref="T:System.Char"/> used as text separator.</param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A task that represents the asynchronous join operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.ConcatUtf8(System.String,System.String[])">
            <summary>
            Concatenates all text parameters passed to this function.
            </summary>
            <param name="initial">Initial string to concatenate.</param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.ConcatUtf8(System.Byte[],System.Byte[][])">
            <summary>
            Concatenates all UTF-8 text parameters passed to this function.
            </summary>
            <param name="initial">Initial string to concatenate.</param>
            <param name="values">A collection that contains the UTF-8 texts to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.ConcatUtf8Async(System.String,System.String[])">
            <summary>
            Concatenates all text parameters passed to this function.
            </summary>
            <param name="initial">Initial string to concatenate.</param>
            <param name="values">A collection that contains the strings to concatenate.</param>
            <returns>
            A task that represents the asynchronous concat operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.Join(Rxmxnx.PInvoke.Extensions.CString,Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Concatenates an array of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>, using the specified separator between 
            each member.
            </summary>
            <param name="separator">
            The text to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.Join(System.Byte,Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Concatenates an array of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>, using the specified separator between 
            each member.
            </summary>
            <param name="separator">
            The Byteacter to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.Join(Rxmxnx.PInvoke.Extensions.CString,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Concatenates the members of a collection of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>, using the specified 
            separator between each member.
            </summary>
            <param name="separator">UTF-8 text used as text separator.</param>
            <param name="values">A collection that contains the UTF-8 texts to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.Join(System.Byte,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Concatenates the members of a collection of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>, using the specified 
            separator between each member.
            </summary>
            <param name="separator"><see cref="T:System.Byte"/> used as text separator.</param>
            <param name="values">A collection that contains the UTF-8 texts to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinAsync(Rxmxnx.PInvoke.Extensions.CString,Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Concatenates an array of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>, using the specified separator between 
            each member.
            </summary>
            <param name="separator">
            The text to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinAsync(System.Byte,Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Concatenates an array of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>, using the specified separator between 
            each member.
            </summary>
            <param name="separator">
            The character to use as a separator. separator is included in the returned concatenation
            only if value has more than one element.
            </param>
            <param name="values">Next values.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinAsync(Rxmxnx.PInvoke.Extensions.CString,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Concatenates the members of a collection of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>, using the specified 
            separator between each member.
            </summary>
            <param name="separator"><see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> used as text separator.</param>
            <param name="values">A collection that contains the UTF-8 texts to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.JoinAsync(System.Byte,System.Collections.Generic.IEnumerable{Rxmxnx.PInvoke.Extensions.CString})">
            <summary>
            Concatenates the members of a collection of <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/>, using the specified 
            separator between each member.
            </summary>
            <param name="separator"><see cref="T:System.Byte"/> used as text separator.</param>
            <param name="values">A collection that contains the UTF-8 texts to concatenate.</param>
            <returns>
            A task that represents the asynchronous join operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.Concat(Rxmxnx.PInvoke.Extensions.CString,Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Concatenates all <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> parameters passed to this function.
            </summary>
            <param name="initial">Initial <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to concatenate.</param>
            <param name="values">A collection that contains the <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> values to concatenate.</param>
            <returns>Concatenation with UTF-8 encoding.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.TextUtilities.ConcatAsync(Rxmxnx.PInvoke.Extensions.CString,Rxmxnx.PInvoke.Extensions.CString[])">
            <summary>
            Concatenates all <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> parameters passed to this function.
            </summary>
            <param name="initial">Initial <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> to concatenate.</param>
            <param name="values">A collection that contains the <see cref="T:Rxmxnx.PInvoke.Extensions.CString"/> values to concatenate.</param>
            <returns>
            A task that represents the asynchronous concat operation. The value of the TResult
            parameter contains the concatenation with UTF-8 encoding.
            </returns>
        </member>
        <member name="T:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions">
            <summary>
            Provides a set of extensions for basic operations with <see cref="T:System.ValueType"/> <see langword="unmanaged"/> values.
            </summary>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.AsBytes``1(``0)">
            <summary>
            Retrieves a <see cref="T:System.Byte"/> array from the given <typeparamref name="T"/> value.
            </summary>
            <typeparam name="T"><see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <param name="value"><typeparamref name="T"/> value.</param>
            <returns><see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.AsValues``2(``0[])">
            <summary>
            Creates an array of <typeparamref name="TDestination"/> values from an array of 
            <typeparamref name="TSource"/> values. 
            </summary>
            <typeparam name="TDestination">Destination <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <typeparam name="TSource">Origin <see cref="T:System.ValueType"/> of <see langword="unmanaged"/> value.</typeparam>
            <param name="array">Array of <typeparamref name="TSource"/> values.</param>
            <returns>Array of <typeparamref name="TDestination"/> values.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.WithSafeFixed``1(``0[],Rxmxnx.PInvoke.Extensions.FixedAction{``0})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="array"/> and fixes its memory 
            address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <param name="array">An array of objects of type <typeparamref name="T"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedAction`1"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.WithSafeFixed``1(``0[],Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{``0})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="array"/> and fixes its memory 
            address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <param name="array">An array of objects of type <typeparamref name="T"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.WithSafeFixed``2(``0[],``1,Rxmxnx.PInvoke.Extensions.FixedAction{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="array"/> and fixes its memory 
            address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="array">An array of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.WithSafeFixed``2(``0[],``1,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="array"/> and fixes its memory 
            address until <paramref name="action"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <param name="array">An array of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="action">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedAction`2"/> delegate.</param>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.WithSafeFixed``2(``0[],Rxmxnx.PInvoke.Extensions.FixedFunc{``0,``1})">
            <summary>        
            Prevents the garbage collector from relocating <paramref name="array"/> and fixes its memory 
            address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="array">An array of objects of type <typeparamref name="T"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.WithSafeFixed``2(``0[],Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{``0,``1})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="array"/> and fixes its memory 
            address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="array">An array of objects of type <typeparamref name="T"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`2"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.WithSafeFixed``3(``0[],``1,Rxmxnx.PInvoke.Extensions.FixedFunc{``0,``1,``2})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="array"/> and fixes its memory 
            address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="array">An array of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.FixedFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
        <member name="M:Rxmxnx.PInvoke.Extensions.UnmanagedValueExtensions.WithSafeFixed``3(``0[],``1,Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc{``0,``1,``2})">
            <summary>
            Prevents the garbage collector from relocating <paramref name="array"/> and fixes its memory 
            address until <paramref name="func"/> finish.
            </summary>
            <typeparam name="T">The type of the objects in the array.</typeparam>
            <typeparam name="TArg">The type of the object that represents the state.</typeparam>
            <typeparam name="TResult">The type of the return value of <paramref name="func"/>.</typeparam>
            <param name="array">An array of objects of type <typeparamref name="T"/>.</param>
            <param name="arg">A state object of type <typeparamref name="TArg"/>.</param>
            <param name="func">A <see cref="T:Rxmxnx.PInvoke.Extensions.ReadOnlyFixedFunc`3"/> delegate.</param>
            <returns>The result of <paramref name="func"/> execution.</returns>
        </member>
    </members>
</doc>
